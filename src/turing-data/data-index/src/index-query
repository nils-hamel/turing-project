#!/bin/bash

## turing project
##
##     Nils Hamel - nils.hamel@bluewin.ch
##     Copyright (c) 2016-2018 DHLAB, EPFL
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

##
##  script - script variables
##

# index query time (unix timestamp) #
ML_TIME=

# index query space (eratosthene index) #
ML_BASE=

# index query span #
ML_SPAN=

# index enumeration depth #
ML_ENUM=${4}

# server ip address #
ML_SRIP=

# server service #
ML_SRPT=

# exportation path #
ML_EXPORT=

##
##  script - arguments and parameters
##

function ml_args() {

    # parsing arguments and parameters #
    while [[ ${#} > 0 ]]; do

        # read argument #
        ml_arg="${1}"; shift

        # switch on argument #
        case ${ml_arg} in

            --time|-t)
                ML_TIME=${1}
            shift;;

            --address|-a)
                ML_BASE=${1//,/ }
            shift;;

            --span|-s)
                ML_SPAN=${1}
            shift;;

            --depth|-d)
                ML_ENUM=${1}
            shift;;

            --ip|-i)
                ML_SRIP=${1}
            shift;;

            --port|-p)
                ML_SRPT=${1}
            shift;;

            --export|-x)
                ML_EXPORT=${1}
            shift;;

        esac

    done

}

##
##  script - main function
##

# arguments and parameters #
ml_args ${@}

# compute enumeration boundary #
ml_limit=$(( 8 ** ${ML_ENUM} - 1 ))

# parsing index spatial components #
for ml_enum_a in ${ML_BASE}; do

    # parsing enumeration spatial index #
    for ml_enum_i in $(seq 0 ${ml_limit}); do

        # push enumeration number #
        ml_enum_p=${ml_enum_i}

        # reset digit template #
        ml_digit=""

        # compute additional digits #
        for (( ml_i=0; ml_i<${ML_ENUM}; ml_i=ml_i+1 )); do

            # compute digit template #
            ml_digit="$(( ${ml_enum_p} % 8 ))${ml_digit}"

            # update enumeration number #
            ml_enum_p=$(( ${ml_enum_p} / 8 ))

        done

        # compose raster name #
        ml_name=1-${ML_TIME}-0-${ml_enum_a}${ml_digit}-${ML_SPAN}.ras

        # compose query address #
        ml_addr=/1/${ML_TIME},0/${ml_enum_a}${ml_digit}/${ML_SPAN}

        # perform query on remote server #
        ml_count=$(eratosthene-raster -i ${ML_SRIP} -t ${ML_SRPT} -q ${ml_addr} -r /run/shm/raster-query.ras)

        # check raster point count #
        if (( ${ml_count} > 2048 )); then

            # display information #
            echo "revieving ${ml_name} from server with ${ml_count} ..."

            # move recieved raster #
            mv /run/shm/raster-query.ras ${ML_EXPORT}/${ml_name}

        else

            # display information #
            echo "discaring ${ml_name} from server with ${ml_count} ..."

        fi

    done

done

# remove temporary raster #
rm -f /run/shm/raster-query.ras

